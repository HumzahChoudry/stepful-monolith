continue
Appointment.where(student_id: nil).where("DATETIME(start_time) > ?", DateTime.now)a
Appointment.where("DATETIME(start_time) > ?", DateTime.now)
Appointment.where(student_id: nil).where("DATETIME(start_time) > ?", DateTime.now)
Appointment.where(student_id: nil).where("DATETIME(start_time) < ?", DateTime.now)
Appointment.where(student_id: nil).where("TIME(start_time) > ?", DateTime.now)
Appointment.where(student_id: nil).where("TIME(start_time) < ?", DateTime.now)
Appointment.where(student_id: nil).where("TIME(start_time) > ?", DateTime.now)
Appointment.where(student_id: nil).where("DATETIME(start_time) > ?", DateTime.now)
Appointment.where(student_id: nil).where("DATE(start_time) > ?", DateTime.now)
@appointments = Appointment.where(student_id: nil)
    6:       @appointments =
Appointment.all.filter{ |a| a.student_id != nil && a.start_time > DateTime.now } 
Appointment.all
Appointments.all
@appointments
continue
Appointment.where("student_id is nil AND start_time > ?", DateTime.now)
Appointment.where("student_id is NULL AND start_time > ?", DateTime.now)
@appointments
Appointment.all.filter{ |a| a.student_id != nil && a.start_time > DateTime.now } 
Appointment.all
@appointments
continue
overlap = coach.appointments.filter{|a| a.id != id}.any? do |a|
            (a.start_time..a.end_time).overlaps?(start_time..end_time)
        end
start_time
coach.appointments
overlap
continue
coach.appointments
overlap
exit
exception
next
@appointment.errors
@appointment.save
@appointment
continue
exit
(a.start_time..a.end_time).overlaps?(start_time..end_time)
(a.start_time..a.end_time).overlaps?(start_time..end_time
start_time < a.start_time && end_time > a.start_time
a.start_time < start_time && a.end_time > start_time
a = coach.appointments.second
end_time
start_time
overlap
next
coach.appointments
exit
location: @appointment
next
@appointment.save
@appointment
